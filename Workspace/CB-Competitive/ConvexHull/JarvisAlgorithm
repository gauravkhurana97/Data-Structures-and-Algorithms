#include <iostream>
#include <vector>
using namespace std;

class Point{
    public:
        int x,y;  
};

int orientation(Point p,Point q,Point r){
    //int m1=(p.y-q.y)/(p.x-q.x);//slope between current 2 points
    //int m2=(q.y-r.y)/(q.x-r.x);//slope between the other 2 points
    int m=(p.y-q.y)*(q.x-r.x)-(p.x-q.x)*(q.y-r.y);//use this instead of the above method
    //int value=m1-m2;
    if(m==0){
        return 0;//point q and r are collinear
    }
    return m>0?1:2;//1 implies no change continue with original pair of points which are p and q  
}

void convexHull(Point *points,int n){
    //input are the points array and total number of points 
    if(n<3){
        return;
    }
    vector<Point> hull;
    int l=0;
    //now select the index of leftmost point
    for(int i=0;i<n;i++){
        if(points[i].x<points[l].x){
            l=i;
        }
    }
    int p=l,q;//p is the current point,q is the other point in the pair which may change depending upon whether its a rightmost point or not
    do{
        hull.push_back(points[p]);//push_back that point in the array
        int q=(p+1)%n;
        for(int i=0;i<n;i++){
            if(orientation(points[p],points[i],points[q])==2){
                q=i;//change the rightmost point
            }
        }
        p=q;//fir uss rightmost point ka rightmost point dhundho till you finally reach at the beginning node
    }while(p!=l);
    
    for(int i=0;i<hull.size();i++){
        cout<<"("<<hull[i].x<<","<<hull[i].y<<")"<<endl;
    }
    
}

int main(){
    Point points[] = {{0, 3}, {2, 2}, {1, 1}, {2, 1},
                      {3, 0}, {0, 0}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    convexHull(points, n);
    return 0;
}
