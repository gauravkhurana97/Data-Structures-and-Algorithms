#include <iostream>
#include <vector>
using namespace std;
typedef long long int ll;

ll k=2;
vector<ll> initial,coeff;

vector<vector<ll> > multiply(vector<vector<ll> > A,vector<vector<ll> > B){
    vector<vector<ll> > C(k+1,vector<ll>(k+1));
    for(int i=1;i<=k;i++){
        for(int j=1;j<=k;j++){
            for(int x=1;x<=k;x++){
                C[i][j]=C[i][j]+A[i][x]*B[x][j];
            }
        }
    }
     /*for(int i=1;i<=k;i++){
        for(int j=1;j<=k;j++){
            cout<<C[i][j]<<" ";
        }
        cout<<endl;
    }*/
    return C;
}

vector<vector<ll> > power(vector<vector<ll> > A,int p){
    if(p==1){
        return A;
    }
    else if(p&1){
        return multiply(A,power(A,p-1));
    }
    else{
        vector<vector<ll> > smallAns=power(A,p/2);
        return multiply(smallAns,smallAns);
    }
}

ll compute(ll n){
    if(n==0){
        return 1;
    }   
    else if(n<=k){
        return initial[n-1];
    }
    vector<ll> F1(k);
    //Does matrix exponentiation indexing at 1
    for(int i=1;i<=k;i++){
        F1[i]=initial[i-1];
    }
    //Init T
    vector<vector<ll> > T(k+1,vector<ll>(k+1));
    for(int i=1;i<=k;i++){
        for(int j=1;j<=k;j++){
            if(i<k){
                if(j==i+1){
                    T[i][j]=1;
                }
                else{
                    T[i][j]=0;
                }
            }else{
            //we know that the last row is coeff in reverse order
            T[i][j]=coeff[k-j];
            }
        }
    }
   /* for(int i=1;i<=k;i++){
        for(int j=1;j<=k;j++){
            cout<<T[i][j]<<" ";
        }
        cout<<endl;
    }*/
    T=power(T,n-1);
    //Now compute the first term of the Final k*1 matrix
    ll res=0;
    for(int i=1;i<=k;i++){
        res=res+T[1][i]*F1[i];
    }
    return res;
}

int main() {
    //k=2;
    //initializing F1
    for(int i=0;i<k;i++){
        initial.push_back(1);
    }
    //initializing the coeff array
    for(int i=0;i<k;i++){
        coeff.push_back(1);
    }
    ll n;cin>>n;
    cout<<compute(n)<<endl;
}

