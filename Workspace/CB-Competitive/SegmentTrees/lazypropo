#include <bits/stdc++.h>
using namespace std;

//Seg trees are nothing but a simple application of divide and conquer

int lazy[1000]={0};

void buildTree(int *arr,int *tree,int index,int s,int e){
    if(s>e){
        return;
    }
    if(s==e){
        tree[index]=arr[s];
        return;
    }
    //otherwise call on left and right subtree
    int mid=(s+e)/2;
    buildTree(arr,tree,2*index,s,mid);
    buildTree(arr,tree,2*index+1,mid+1,e);
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}

int query(int *tree,int index,int s,int e,int qs,int qe){
    //no overlap
    if(qe<s || e<qs){
        return INT_MAX;
    }
    //complete overlap
    if(qs<=s && e<=qe){
        return tree[index];
    }
    //query range is small as compared to complete range i.e it lies partially 
    int mid=(s+e)>>1;
    int left=query(tree,2*index,s,mid,qs,qe);
    int right=query(tree,2*index+1,mid+1,e,qs,qe);
    return min(left,right);
}

//node update
void nodeUpdate(int *tree,int index,int s,int e,int i,int value){
    //no overlap
    if(i<s || e<i){
        return;
    }
    //ultimately we will reach this leaf node
    if(s==e){
        tree[index]=value;
        return;
    }
    int mid=(s+e)>>1;
    nodeUpdate(tree,2*index,s,mid,i,value);
    nodeUpdate(tree,2*index+1,mid+1,e,i,value);
    //we also have to update the parent node of the leaf node 
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}


int queryLazy(int *tree,int ss,int se,int qs,int qe,int index){
    // First step - resolve the Lazy value
    if(lazy[index]!=0){
        tree[index] += lazy[index];
        if(ss!=se){
            lazy[2*index+1]  += lazy[index];
            lazy[2*index] += lazy[index];
        }
        lazy[index] = 0;
    }
    
    
    //No Overlap 
    if(ss>qe || se<qs){
        return INT_MAX;
    }
    
    // Complete Overlap 
    if(ss>=qs && se<=qe){
        
        return tree[index];
    }
    
    
    //Partial 
    int mid = (ss+se)/2;
    int left = queryLazy(tree,ss,mid,qs,qe,2*index);
    int right = queryLazy(tree,mid+1,se,qs,qe,2*index+1);
    
    return min(left,right);
    
    
}

void updateRangeLazy(int *tree,int ss,int se,int l,int r,int inc,int index){
    //First Step - Never we go down if you have lazy value at node, first resolve it 
    
    if(lazy[index]!=0){
        
        tree[index] += lazy[index];
        
        //if not a leaf node 
        if(ss!=se){
            lazy[2*index] += lazy[index];
            lazy[2*index+1] += lazy[index];
        }
        lazy[index] = 0;
    }
    
    // Out of Bounds 
    if(ss>r || l > se){
        return;
    }
    // Complete Overlap- Beeche Raste Mei hi Return krna 
    if(ss>=l && se<=r){
        tree[index] += inc;
        
        // Pass the lazy value to children 
        if(ss!=se){
            lazy[2*index] +=  inc;
            lazy[2*index+1] += inc;
        }
    return;
    }
    
    //Call on Left and Right 
    int mid = (ss+se)/2;
    updateRangeLazy(tree,ss,mid,l,r,inc,2*index);
    updateRangeLazy(tree,mid+1,se,l,r,inc,2*index+1);
    tree[index] = min(tree[2*index],tree[2*index+1]);
    
    return;
    
}

void rangeUpdate(int *tree,int index,int s,int e,int rs,int re,int inc){
    //no overlap
    if(re<s || e<rs){
        return;
    }
    //Leaf Node par aaye hai toh update to hona hi hai
    if(s==e){
        tree[index]+=inc;
        return;
    }
    int mid=(s+e)>>1;
    rangeUpdate(tree,2*index,s,mid,rs,re,inc);
    rangeUpdate(tree,2*index+1,mid+1,e,rs,re,inc);
    //we also have to update the parent node of the leaf node 
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}

int main() {
    int arr[]={1,3,2,-5,6,4};
    int n=sizeof(arr)/sizeof(int);
    int *tree=new int[4*n+1]; 
    int s=0,e=n-1;
    buildTree(arr,tree,1,s,e);
    for(int i=1;i<13;i++){
        cout<<tree[i]<<" ";
    }
    cout<<endl;
    //nodeUpdate(tree,1,s,e,0,4);
    updateRangeLazy(tree,0,n-1,2,3,10,1);
    
    int no_of_q = 6;
    
    while(no_of_q--){
        int l,r;
        cin>>l>>r;
        cout<< queryLazy(tree,0,n-1,l,r,1)<<endl;
    }
    
    //updateRangeLazy(tree,1,s,e,1,2,-3);
    //cout<<queryLazy(tree,1,s,e,0,2)<<endl;
}

