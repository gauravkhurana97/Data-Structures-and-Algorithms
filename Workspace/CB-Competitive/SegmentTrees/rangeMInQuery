#include <bits/stdc++.h>
using namespace std;

//Seg trees are nothing but a simple application of divide and conquer

void buildTree(int *arr,int *tree,int index,int s,int e){
    if(s>e){
        return;
    }
    if(s==e){
        tree[index]=arr[s];
        return;
    }
    //otherwise call on left and right subtree
    int mid=(s+e)/2;
    buildTree(arr,tree,2*index,s,mid);
    buildTree(arr,tree,2*index+1,mid+1,e);
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}

int query(int *tree,int index,int s,int e,int qs,int qe){
    //no overlap
    if(qe<s || e<qs){
        return INT_MAX;
    }
    //complete overlap
    if(qs<=s && e<=qe){
        return tree[index];
    }
    //query range is small as compared to complete range i.e it lies partially 
    int mid=(s+e)/2;
    int left=query(tree,2*index,s,mid,qs,qe);
    int right=query(tree,2*index+1,mid+1,e,qs,qe);
    return min(left,right);
}

//node update
void nodeUpdate(int *tree,int index,int s,int e,int i,int value){
    //no overlap
    if(i<s || e<i){
        return;
    }
    //ultimately we will reach this leaf node
    if(s==e){
        tree[index]=value;
        return;
    }
    int mid=(s+e)/2;
    nodeUpdate(tree,2*index,s,mid,i,value);
    nodeUpdate(tree,2*index+1,mid+1,e,i,value);
    //we also have to update the parent node of the leaf node 
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}

void rangeUpdate(int *tree,int index,int s,int e,int rs,int re,int inc){
    //no overlap
    if(re<s || e<rs){
        return;
    }
    //Leaf Node par aaye hai toh update to hona hi hai
    if(s==e){
        tree[index]+=inc;
        return;
    }
    int mid=(s+e)/2;
    rangeUpdate(tree,2*index,s,mid,rs,re,inc);
    rangeUpdate(tree,2*index+1,mid+1,e,rs,re,inc);
    //we also have to update the parent node of the leaf node 
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}

int main() {
    int arr[]={1,3,2,-5,6,4};
    int n=sizeof(arr)/sizeof(int);
    int *tree=new int[4*n+1]; 
    int s=0,e=n-1;
    buildTree(arr,tree,1,s,e);
    for(int i=1;i<13;i++){
        cout<<tree[i]<<" ";
    }
    cout<<endl;
    //nodeUpdate(tree,1,s,e,0,4);
    rangeUpdate(tree,1,s,e,1,2,-2);
    cout<<query(tree,1,s,e,0,2)<<endl;
}

