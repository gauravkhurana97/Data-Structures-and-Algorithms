#include <iostream>
using namespace std;

int findMax(int *arr,int low,int high){
    
    if(low==high){
        return arr[low];
    }
    int mid=(low+high)/2;
    int firstHalf=findMax(arr,low,mid);
    int secondHalf=findMax(arr,mid+1,high);
    int maximum=max(firstHalf,secondHalf);
    return maximum;
}

int minElement(int *arr,int n){
    int min=1000;
    for(int i=0,i<n;i++){
        if(min>arr[i]){
            min=arr[i];
        }
    }
}

int kadane(int *arr,int n){
    int cs=0,ms=0;
    for(int i=0;i<n;i++){
        cs+=arr[i];
        if(cs<0){
            cs=0;
        }
        ms=max(cs,ms);
    } 
    return ms;
}

int kadaneUsingDnC(int *arr,int low,int high){
    if(low==high){
        return arr[low];
    }
    int mid=(low+high)/2;
    int firstHalf=kadaneUsingDnC(arr,low,mid);
    int secondHalf=kadaneUsingDnC(arr,mid+1,high);
    
    return max(max(firstHalfSuffix+secondHalfPrefix),firstHalfSum,secondHalfSum);
}

int main() {
    int arr[] ={7,8,1,3,2,5};
    int arrMix[] = {-1,3,5,-2,6,-5,8,7,3,4,-5};
    int arr2[]={-2,-4,-5};
    //cout<<findMax(arr,0,6)<<endl;
    cout<<kadane(arr2,sizeof(arr2)/sizeof(int))<<endl;
    // if the whole array consists of maximum number of negative elements then the max sub array sum will be the min element
}
//Though complexity is same as that of linear search because we have to visit all the elements of array 
