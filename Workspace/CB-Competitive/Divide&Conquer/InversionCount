#include<iostream>
using namespace std;


void merge(int *arr,int low,int high){
    int mid=(low+high)/2;
    int i=low;
    int j=mid+1;
    int k=low;
    int temp[100];
    while(i<=mid && j<=high){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }else{
            temp[k++]=arr[j++];
        }
    }
    while(i<=mid){
        temp[k++]=arr[i++];
    }
    while(j<=high){
        temp[k++]=arr[j++];
    }
    for(int i=low;i<=high;i++){
        arr[i]=temp[i];
    }
}

void mergeSort(int *arr,int low,int high){
    if(low==high){
        return;
    }
    int mid=(low+high)/2;
    mergeSort(arr,low,mid);
    mergeSort(arr,mid+1,high);
    merge(arr,low,high);
}

int crossInv(int *arr,int low,int high){
    int mid=(low+high)/2;
    int i=low;
    int j=mid+1;
    int temp[100];
    int k=low,inv=0;
    while(i<=mid && j<=high){
        if(arr[i]<arr[j]){
            temp[k++]=arr[i++];
        }else{
            inv+=mid-i+1;
            temp[k++]=arr[j++];
        }
    }
    while(i<=mid){
        temp[k++]=arr[i++];
    }
    while(j<=high){
        temp[k++]=arr[j++];
    }
    
    for(int i=low;i<=high;i++){
        arr[i]=temp[i];
    }
    return inv;
}

int countInv(int *arr,int low,int high){
    if(low==high){
        return 0;
    }
    int mid=(low+high)/2;
    int ans=countInv(arr,low,mid)+countInv(arr,mid+1,high)+crossInv(arr,low,high);   
    return ans;
}

int main(){
  
	int a[] = {4,6,1,2,3,7};
	int n = 6;
	mergeSort(a,0,n-1);
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
	cout<<countInv(a,0,n-1)<<endl;
	return 0;
}
