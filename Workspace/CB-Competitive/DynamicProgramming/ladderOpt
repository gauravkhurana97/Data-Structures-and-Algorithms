#include <iostream>
using namespace std;

//n is the number of steps and k is the maximum jump
//works in 0(k^n)
int steps(int n,int k){
    if(n<0)
        return 0;
    if(n==0 || n==1)
        return 1;
    int ans=0;
    for(int i=1;i<=k;i++){
        ans+=steps(n-i,k);
    }
    return ans;
} 

//bottom up DP-0(n*k) time -> 2 for loops iterating over them n and k times resp
int stepsBU(int n,int k){
    int *dp=new int[n+1];
    dp[0]=1;dp[1]=1;
    for(int i=2;i<=n;i++){
        dp[i]=0;
        for(int j=1;j<=k;j++){
            if(i-j>=0){
                dp[i]+=dp[i-j];
            }
        }
    }
    return dp[n];
}

//recursion + memoisation
int stepsTD(int n,int k,int *dp){
    if(n<0){
        return 0;
    }
    if(n==0 || n==1){
        dp[n]=1;
        return dp[n];
    }
    if(dp[n]!=-1){
        return dp[n];
    }
    int ans=0;//initially every steps pe pahuchne ke 0 ways hai
    for(int i=1;i<=k;i++){
        ans+=stepsTD(n-i,k,dp);
    }
    dp[n]=ans;
//    dp[n]=stepsTD(n-1,k,dp)+stepsTD(n-2,k,dp)+stepsTD(n-3,k,dp);
    return dp[n];    
}

//works in 0(n) using this approach->only one for loop
int stepsOpt(int n,int k){
    int *dp=new int[n+1];
    dp[0]=1;dp[1]=1;
    for(int i=2;i<=n;i++){
        if(i-k>=0){
            dp[i]=2*dp[i-1]-dp[i-k];
        }
    }
    return dp[n];
}


int main() {
    cout<<steps(3,3)<<endl;
    cout<<stepsBU(3,3)<<endl;
    int n=5;
    int *dp=new int[n+1];
    for(int i=0;i<=n;i++){
        dp[i]=-1;
    }
    cout<<stepsTD(5,3,dp)<<endl;
}

