#include <bits/stdc++.h>
using namespace std;

//by recursion
int minCoinsRecur(int *coins,int num,int amount){
    if(amount<0){
        return 0;
    }
    if(amount==0){
        return 0;
    }
    int val=INT_MAX;
    for(int i=0;i<num;i++){
        if((amount-coins[i])>=0){
            val=min(val,minCoinsRecur(coins,num,amount-coins[i]));
        }
    }
    return val+1;
}
//recursion + memoisation
int coinChange(int *coins,int n,int amount,int *dp){
    if(amount<=0){
        return 0;
    }
    if(dp[amount]!=0){
        return dp[amount];
    }
    int ans=INT_MAX;
    for(int i=0;i<n;i++){
        if((amount-coins[i])>=0){
            dp[amount-coins[i]]=coinChange(coins,n,amount-coins[i],dp);
            ans=min(ans,dp[amount-coins[i]]);
        }
    }
    return ans+1;
}

//min coins needed by DP
void minCoins(int *coins,int num,int amount){//num is the number of coins
    int arr[amount+1]{0};
    int val;
    for(int i=0;i<=amount;i++){
        arr[i]=0;
    }
    arr[0]=1;
    for(int i=1;i<=amount;i++){
        val=INT_MAX;
        for(int j=0;j<num;j++){
            if(i==coins[j]){
                arr[i]=1;
                break;
            }
            else if((i-coins[j])>=0){
                val=min(val,arr[i-coins[j]]);
            }
        }
        if(arr[i]!=1){
            arr[i]=val+1;
        }
    }            
    cout<<arr[amount]<<endl;
}

int main() {
    int coins[]={1,7,10};
    int amount=35,num=3;
    cout<<minCoinsRecur(coins,num,amount);
    //minCoins(coins,num,amount);
    return 0;
}

