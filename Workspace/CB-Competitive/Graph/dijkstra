#include<iostream>
#include<set>
#include<map>
#include<list>
using namespace std;

template<typename T>
class Graph{
    map<T,list<pair<T,int> > > mymap;
    public:
        void addEdge(T u,T v,int dist,bool bidr=true){
            mymap[u].push_back(make_pair(v,dist));
            if(bidr){
                mymap[v].push_back(make_pair(u,dist));
            }
        }
        
        void dijkistra(T src){
            map<T,int> dist;
            for(auto d:mymap){
                dist[d.first]=999;
            }
            dist[src]=0;
            set<pair<int,T> > s;
            s.insert(make_pair(0,src));
            while(!s.empty()){
                auto p=*(s.begin());
                T node=p.second;
                int nodeDist=p.first;
                s.erase(s.begin());
                for(auto childPair:mymap[node]){
                    if(dist[childPair.first]>nodeDist+childPair.second){
                        auto f=s.find(make_pair(dist[childPair.first],childPair.first));
                        if(f!=s.end()){
                            s.erase(f);
                        }
                        dist[childPair.first]=nodeDist+childPair.second;
                        s.insert(make_pair(dist[childPair.first],childPair.first));
                    }
                }        
            }
            for(auto i:mymap){
                cout<<i.first<<" is "<<dist[i.first]<<" units away from "<<src<<endl;
            }
        }
        
};

int main(){
    Graph<int> gr;
    
    gr.addEdge(1,3,4);
    gr.addEdge(1,2,1);
    gr.addEdge(2,3,1);
    gr.addEdge(4,3,2);
    gr.addEdge(1,4,7);
    
    gr.dijkistra(1);
}
