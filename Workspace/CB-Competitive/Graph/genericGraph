#include <iostream>
#include <map>
#include <list>
#include <queue>
using namespace std;


template<typename T>
class Graph{
    int V;//number of vertices
    map<T,list<T> > mymap;

    //member functions
    public:
        //constructor
        
        Graph(){
            
        }
        
        Graph(int v){
            V=v;
            mymap = new map<T,list<T> >;
        }
        void addEdge(T u,T v,bool bidr=true){
            mymap[u].push_back(v);
            if(bidr)
                mymap[v].push_back(u);
        }
        
        void bfs(T src){
            //by default are set false
            map<T,bool> visited;
            visited[src]=true;
            queue<T> entries;
            entries.push(src);
            while(!entries.empty()){
                T parent=entries.front();
                entries.pop();
                cout<<parent<<" ";
                for(auto child:mymap[parent]){
                    if(!visited[child]){
                        visited[child]=true;
                        entries.push(child);
                    }
                }
            }
            cout<<endl;
        }
        
        void dfshelper(T node,map<T,bool> &visited){
            visited[node]=true;
            cout<<node<<" ";
            for(auto ngbhr:mymap[node]){
                if(!visited[ngbhr]){
                    dfshelper(ngbhr,visited);
                }
            }
        }
        
        void dfs(T src){
            map<T,bool> visited;
            dfshelper(src,visited);
            cout<<endl;
        }
        
        ///SSSP for unweighted graphs
        
        void sssp(T src){
            map<T,bool> visited;
            visited[src]=true;
            map<T,int> distance;
            distance[src]=0;
            map<T,T> parent;
            parent[src]=src;
            queue<T> myq;
            myq.push(src);
            while(!myq.empty()){
                T node=myq.front();
                myq.pop();
                for(auto ngbhr:mymap[node]){
                    if(!visited[ngbhr]){
                        distance[ngbhr]=distance[node]+1;
                        visited[ngbhr]=true;
                        myq.push(ngbhr);
                    }
                }
            }
            for(auto entry:mymap){
                cout<<entry.first<<" is "<<distance[entry.first]<<" units away."<<endl;
            }
        }
        

        void connectedComponentshelper(T node,map<T,bool> &visited){
            visited[node]=true;//mark the visited node as true
            for(auto ngbhr:mymap[node]){
                if(!visited[ngbhr]){
                    connectedComponentshelper(ngbhr,visited);
                }
            }
        }

        void connectedComponents(T src){
            map<T,bool> visited;
            int comp=1;
            for(auto entry:visited){
                cout<<entry.first<<endl;
            }
            connectedComponentshelper(src,visited);
            for(auto entry:mymap){
                T node=entry.first;
                if(!visited[node]){
                    connectedComponentshelper(entry.first,visited);
                    comp++;
                }
            }
            cout<<comp<<endl;
        }
        
        bool cycleDetectionUsingBFS(T src){
            map<T,bool> visited;
            visited[src]=true;
            map<T,T> parent;
            parent[src]=src;
            queue<T> myq;
            myq.push(src);
            while(!myq.empty()){
                T node=myq.front();
                myq.pop();
                for(auto ngbhr:mymap[node]){
                    if(visited[ngbhr]==true && parent[node]!=ngbhr){
                        return true;
                    }
                    else if(!visited[ngbhr]){
                        visited[ngbhr]=true;
                        parent[ngbhr]=node;
                        myq.push(ngbhr);
                    }
                }
                
            }
            return false;
        }
        
        void display(){
            for(auto key:mymap){
                cout<<key.first<<" ";
                for(auto value:key.second){
                    cout<<value<<",";
                }
                cout<<"END"<<endl;
            }
        }
};

int main() {
    Graph<int> g;
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(2,3);
    g.addEdge(3,5);
    g.display();
    g.addEdge(6,7);
    //g.bfs(0);
    //g.dfs(0);
    //g.connectedComponents(0);
    //g.sssp(0);
    Graph<int> gr;
    gr.addEdge(0,1);
    gr.addEdge(1,2);
   // gr.addEdge(0,2);
    if(gr.cycleDetectionUsingBFS(0)){
        cout<<"cycle"<<endl;
    }else{
        cout<<"no cycle"<<endl;
    }
}

