#include <iostream>
#include <map>
#include <list>
#include <queue>
using namespace std;

class Graph{
    map<int,list<int> > myMap;
    public:
        void addEdge(int parent,int child,bool bldr=true){
            myMap[parent].push_back(child);
            if(bldr)
                myMap[child].push_back(parent);
        }
    
        void print(){
            for(pair<int,list<int> > pair:myMap){
                cout<<pair.first<<"->";
                for(int child:myMap[pair.first]){
                    cout<<child<<",";
                }
                cout<<"END"<<endl;
            }
        }
        
        void bfs(int src){
            map<int,bool> visited;
            visited[src]=true;
            queue<int> myQ;
            myQ.push(src);
            while(!myQ.empty()){
                src=myQ.front();
                cout<<src<<" ";
                myQ.pop();//popping from the front
                for(int child:myMap[src]){
                    if(visited[child]==false){
                        visited[child]=true;
                        myQ.push(child);
                    }
                }
            }
        }
        
        void dfshelper(int current,map<int,bool> &visited){
            visited[current]=true;
            cout<<current<<" ";
            for(int child:myMap[current]){
                if(visited[child]==false){
                    dfshelper(child,visited);
                }
            }
        }
        
        void dfs(int src){
            map<int,bool> visited;
            dfshelper(src,visited);
        }
        
        //connected components using DFS
        void compohelper(int current,map<int,bool> &visited){
            visited[current]=true;
            for(int child:myMap[current]){
                if(visited[child]==false){
                    compohelper(child,visited);
                }
            }
        }
        
        void compo(){
            pair<int,list<int> > firstele=*myMap.begin();
            int src=firstele.first;
            //cout<<src<<endl;
            map<int,bool> visited;
            compohelper(src,visited);
            
            //use either this
            for(pair<int,list<int> > entry:myMap){
                if(visited[entry.first]==false){
                    cout<<"Not connected"<<endl;
                    return;
                }
            }
            cout<<"connected"<<endl;
            
    /*        //or first initialize all values of visited with keys
            for(pair<int,list> > entry:myMap){
                map[entry.first]=false;
            }
            compohelper(src,visited);
            //and then
            for(pair<int,bool> entry:visited){
                if(entry.second==false){
                    cout<<"NC"<<endl;
                    return;
                }
            }
            cout<<"C"<<endl;
        }
        */
};

int main() {
    Graph g;
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(3,5);
    g.addEdge(2,3);
    //g.addEdge(8,9);
    //g.print();
    //g.bfs(0);
    //cout<<endl;
    //g.dfs(0);
    g.compo();
    
}

