#include <iostream>
#include <map>
#include <list>
#include <queue>
using namespace std;

class Graph{
    map<int,list<int> > myMap;
    public:
        void addEdge(int parent,int child,bool bldr=false){
            myMap[parent].push_back(child);
            if(bldr)
                myMap[child].push_back(parent);
        }
    
        void print(){
            for(pair<int,list<int> > pair:myMap){
                cout<<pair.first<<"->";
                for(int child:myMap[pair.first]){
                    cout<<child<<",";
                }
                cout<<"END"<<endl;
            }
        }
        void cycleDetectionBFS(int src){
            map<int,int> parent;
            map<int,int> visited;
            parent[src]=src;
            visited[src]=true;
            queue<int> myQ;
            myQ.push(src);
            while(!myQ.empty()){
                int current=myQ.front();
                myQ.pop();
                for(pair<int,list<int> > node:myMap){
                    for(int child:myMap[current]){
                        if(visited[child]==true && parent[current]!=child){ //or parent[current]!=parent[child] && visited[child]==true
                            cout<<"CYCLE"<<endl;
                            return;
                        }else{
                            visited[child]=true;
                            parent[child]=current;
                            myQ.push(child);
                        }
                    }
                }
            }
            cout<<"No CYCLE"<<endl;
        }
};

int main() {
    Graph g;
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(3,5);
    g.addEdge(2,3);
}

